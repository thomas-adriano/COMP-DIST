package com.taxifleet.server.dao;

import java.io.Serializable;
import java.rmi.Remote;
import java.util.ArrayList;
import java.util.List;

import com.taxifleet.server.dao.tables.DbTable;

public class DatabaseWatcher implements Remote, TableObserver, DBObservable,
		Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -801645259885966317L;
	private List<TableObservable> observedTables;
	private List<DBObserver> observers;
	private List<TableWatcher<? extends DbTable>> watchers;
	public static final String REMOTE_NAME = "DB_WATCHER";

	public static void main(String[] args) {
		DatabaseWatcher dbWatcher = new DatabaseWatcher();
		long watchTime = 1000l;

		PrecosTableWatcher precosWatcher = new PrecosTableWatcher(watchTime);
		TaxiTableWatcher taxiWatcher = new TaxiTableWatcher(watchTime);
		StatusTableWatcher statusWatcher = new StatusTableWatcher(watchTime);
		ViagemTableWatcher viagemWatcher = new ViagemTableWatcher(watchTime);

		dbWatcher.registerTableWatcher(precosWatcher);
		dbWatcher.registerTableWatcher(taxiWatcher);
		dbWatcher.registerTableWatcher(statusWatcher);
		dbWatcher.registerTableWatcher(viagemWatcher);

		dbWatcher.startWatchers();
	}

	public void startWatchers() {
		if (watchers == null)
			throw new RuntimeException(
					"No watchers registered. Use registerWatcher()");

		for (TableWatcher<? extends DbTable> watcher : watchers) {
			Thread t = new Thread(watcher);
			t.start();
		}
	}

	public void registerObservableTables(List<TableObservable>... tablesOfTables) {
		for (List<TableObservable> tables : tablesOfTables) {

			for (TableObservable observable : tables) {
				observable.registerObserver(observable);
			}

		}
	}

	public void registerTableWatcher(TableWatcher<? extends DbTable> watcher) {
		if (watchers == null)
			watchers = new ArrayList<>();

		watchers.add(watcher);
	}

	@Override
	public void registerObserver(DBObserver o) {
		if (observers == null)
			observers = new ArrayList<>();

		observers.add(o);

	}

	@Override
	public void notifyObservers() {
		for (DBObserver o : observers) {
			o.update(observedTables);
		}

	}

	@Override
	public void update(TableObservable table) {
		if (observedTables == null)
			observedTables = new ArrayList<>();

		observedTables.add(table);
	}

}
